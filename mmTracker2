import os
from PIL import Image, ImageTk
import tkinter as tk

# Load the 32x32 mask images
mask_images = []
mask_names = []
for i in range(24):
    filename = os.path.join("ICONS", f"mask_{i+1}.png")
    mask_image = Image.open(filename).convert("RGBA")
    mask_images.append(mask_image)
    mask_names.append(filename)

# Load the background image
bg_image = Image.open("pause_screen.png")

# Create a new image for the pause screen element
pause_screen_width = 240
pause_screen_height = 160
pause_screen = Image.new("RGBA", (pause_screen_width, pause_screen_height), (0, 0, 0, 0))
# Combine the pause screen element and the background image
combined_image = bg_image.copy()
combined_image.alpha_composite(pause_screen)

# Create a window and display the combined image
root = tk.Tk()
root.title("Majora's Mask")

# Set the minimum size of the window to the size of the combined image
root.minsize(combined_image.width, combined_image.height)

# Create a frame for the pause screen and pack it in the window
pause_screen_frame = tk.Frame(root)
pause_screen_frame.pack(fill=tk.BOTH, expand=True)

# Convert the image to a PhotoImage object and display it in a label
img = ImageTk.PhotoImage(combined_image)
label = tk.Label(pause_screen_frame, image=img)
label.pack(fill=tk.BOTH, expand=True)

# Set the position of the pause screen element as a proportion of the window size
pause_screen_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

# Paste the mask images onto the pause screen element as buttons
mask_width = 32
mask_height = 32
x_offset = (pause_screen_width - (6 * mask_width)) // 2
y_offset = ((pause_screen_height - (4 * mask_height)) // 2) + 10  # shift down by 10 pixels
for i, mask_image in enumerate(mask_images):
    button_image = ImageTk.PhotoImage(mask_image)
    button = tk.Button(pause_screen_frame, image=button_image, command=lambda name=mask_names[i]: print(name),bg='#555555')
    button.image = button_image
    button.place(x=x_offset, y=y_offset)
    x_offset += mask_width
    if (i+1) % 6 == 0:
        x_offset = (pause_screen_width - (6 * mask_width)) // 2
        y_offset += mask_height
        y_offset = min(y_offset, pause_screen_height - mask_height)  # adjust for last row
    x_offset = min(x_offset, pause_screen_width - mask_width)  # adjust for last column

root.mainloop()
